auth:
  url: http://localhost:9001
spring:
  application:
    name: gatewayserver
  config:
    import: "optional:configserver:http://localhost:8071/"
  cloud:
    gateway:
      server:
        webflux:
          discovery:
            locator:
              enabled: false
              lowerCaseServiceId: true
          httpclient:
            connect-timeout: 1000
            response-timeout: 2s
  security:
    oauth:
      resourceserver:
        opaque-token:
          introspection-uri: ${auth.url}/oauth2/introspect
          client-id: gateway-service
          client-secret: gateway-secret
      client:
        registration:
          gateway-service:
            client-id: gateway-service
            client-secret: gateway-secret
            authorization-grant-type: client_credentials
            scope: service.read, service.write, internal.api
          opaque-token-service:
            client-id: secure-service
            client-secret: secure-secret
            authorization-grant-type: client_credentials
            scope: service.read,service.write, internal.api, introspection
        providers:
          gateway-service:
            token-uri: ${auth.url}/oauth2/introspection
          opaque-token-service:
            token-uri: ${auth.url}/oauth2/introspection
#  data:
#    redis:
#      connect-timeout: 2s
#      host: localhost
#      port: 6379
#      timeout: 1s

management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    gateway:
      access: unrestricted
  info:
    env:
      enabled: true

info:
  app:
    name: "gatewayserver"
    description: "gateway microservice"
    version: "1.0.0"

logging:
  level:
    com:
      microservice:
        gatewayserver: DEBUG

resilience4j.circuitbreaker:
  configs:
    default:
      slidingWindowSize: 10
      permittedNumberOfCallsInHalfOpenState: 2
      failureRateThreshold: 50
      waitDurationInOpenState: 10000
